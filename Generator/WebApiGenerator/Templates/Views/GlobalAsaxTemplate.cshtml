@model GeneratorBase.GeneratorModel
using Autofac;
using Autofac.Integration.WebApi;
using Newtonsoft.Json;
using System.Reflection;
using System.Web.Http;
using System.Web.Mvc;
using System.Web.Optimization;
using @(Model.ProjectName).Business;
using @(Model.ProjectName).Contracts.Business;
using @(Model.ProjectName).Contracts.DataAccess;
using @(Model.ProjectName).DataAccess;
using @(Model.ProjectName).DataAccess.Data;
using @(Model.ProjectName).DataAccess.UnitOfWork;

namespace @(Model.ProjectName)
{
    public class WebApiApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            // IoC Container Setup
            var builder = new ContainerBuilder();
            // Get your HttpConfiguration.
            var config = GlobalConfiguration.Configuration;

            // Register your Web API controllers.
            builder.RegisterApiControllers(Assembly.GetExecutingAssembly());

            // OPTIONAL: Register the Autofac filter provider.
            builder.RegisterWebApiFilterProvider(config);

			// register business classes

		@foreach (var module in Model.Modules)
        {
            foreach (var type in module.Models.Where(m => m.BaseType != typeof(Enum)))
            {
            builder.RegisterType<@(type.Name)Business>().As<I@(type.Name)Business>();
			}
		}

            // register data classes
            builder.RegisterGeneric(typeof(BaseData<>)).As(typeof(IBaseData<>));

			// register data access
            builder.RegisterType<@(Model.ProjectName)Context>().AsSelf();
            builder.RegisterType<EFUnitOfWork>().As<IUnitOfWork>();

            // Set the dependency resolver to be Autofac.
            var container = builder.Build();
            config.DependencyResolver = new AutofacWebApiDependencyResolver(container);

            // JSON.Net
            GlobalConfiguration.Configuration.Formatters.JsonFormatter.SerializerSettings.Re‌​ferenceLoopHandling = ReferenceLoopHandling.Ignore;

            AreaRegistration.RegisterAllAreas();
            GlobalConfiguration.Configure(WebApiConfig.Register);
            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
            // RouteConfig.RegisterRoutes(RouteTable.Routes);
            BundleConfig.RegisterBundles(BundleTable.Bundles);
        }
    }
}
