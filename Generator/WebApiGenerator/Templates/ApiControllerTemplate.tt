<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="Focus.Common" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
using Bogus;
using Focus.Common.Pagination;
using <#= ProjectName #>.Common;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Web.Http;
using System.Web.Http.Cors;

namespace <#= ProjectName #>.Controllers
{
    [Route("api/<#= moduleName #>/<#= Type.Name.ToLower(new System.Globalization.CultureInfo("en-EN", false)) #>/{id?}")] 
    [EnableCors(origins: "http://localhost:8080", headers: "*", methods: "*")]
    public class <#= Type.Name #>Controller : BaseController<<#= Type.Name #>>
    {
        public PageResult<<#= Type.Name #>> Get(string filterQuery, int startIndex, int rowsOnPage, string sortBy, string sortOrder)
        {
            return base.Get("<#= SearchProperty.Name #>", "Id", filterQuery, startIndex, rowsOnPage, sortBy, sortOrder);
        }

        public override IQueryable<<#= Type.Name #>> Generate()
        {
            if (_cacheManager.Contains("<#= Type.Name #>List"))
            {
                return _cacheManager.Get<IQueryable<<#= Type.Name #>>>("<#= Type.Name #>List");
            }

            int itemCount = Randomizer.Seed.Next(5, 50);
            var faker = new Faker<<#= Type.Name #>>();
<# 
var properties = Type.Type.GetProperties();
foreach (var propertyInfo in properties)
{
if(propertyInfo.Name.Equals("Id"))
{ #>
            faker.RuleFor(item => item.Id, f => f.IndexFaker);
<# }
else if (propertyInfo.PropertyType == typeof(int))
{ #>
			faker.RuleFor(item => item.<#= propertyInfo.Name #>, f => f.Random.Int(1, 999));
<# }
else if (propertyInfo.PropertyType == typeof(string))
{ #>
            faker.RuleFor(item => item.<#= propertyInfo.Name #>, f => f.Lorem.Word());
<# }
else if (propertyInfo.PropertyType.BaseType != null && propertyInfo.PropertyType.BaseType == typeof(Enum))
{ #>
			var arr = Enum.GetValues(typeof(<#= propertyInfo.PropertyType.Name #>)).Cast<<#= propertyInfo.PropertyType.Name #>>();
            faker.RuleFor(item => item.<#= propertyInfo.Name #>, f => f.PickRandom(arr));
<# }
else if (propertyInfo.PropertyType == typeof(DateTime))
{ #>
			faker.RuleFor(item => item.<#= propertyInfo.Name #>, f => f.Date.Past());
<# }
else if (propertyInfo.PropertyType.BaseType != null && propertyInfo.PropertyType.BaseType == typeof(BaseModel))
{ #>
            faker.RuleFor(item => item.<#= propertyInfo.Name #>, f => f.PickRandom(new <#= propertyInfo.PropertyType.Name #>Controller().Generate().ToList()));
<# }
} #>

            var items = new List<<#= Type.Name #>>(faker
                .FinishWith((f, i) => { })
                .Generate(itemCount)).AsQueryable();

            _cacheManager.Add("<#= Type.Name #>List", items);

            return items;
        }
	}
}