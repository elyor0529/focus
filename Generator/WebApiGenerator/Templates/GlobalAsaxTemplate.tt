<#@ template language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="GeneratorBase" #>
using Autofac;
using Autofac.Integration.WebApi;
using BetonCRM.Business;
using BetonCRM.Contracts.Business;
using BetonCRM.Contracts.DataAccess;
using BetonCRM.DataAccess;
using BetonCRM.DataAccess.UnitOfWork;
using System.Reflection;
using System.Web.Http;
using System.Web.Mvc;
using System.Web.Optimization;
using System.Web.Routing;

namespace BetonCRM
{
    public class WebApiApplication : System.Web.HttpApplication
    {
        protected void Application_Start()
        {
            AreaRegistration.RegisterAllAreas();
            GlobalConfiguration.Configure(WebApiConfig.Register);
            FilterConfig.RegisterGlobalFilters(GlobalFilters.Filters);
            RouteConfig.RegisterRoutes(RouteTable.Routes);
            BundleConfig.RegisterBundles(BundleTable.Bundles);

            // IoC Container Setup
            var builder = new ContainerBuilder();
            // Get your HttpConfiguration.
            var config = GlobalConfiguration.Configuration;

            // Register your Web API controllers.
            builder.RegisterApiControllers(Assembly.GetExecutingAssembly());

            // OPTIONAL: Register the Autofac filter provider.
            builder.RegisterWebApiFilterProvider(config);

            // register business classes
			<# foreach (var module in modules)
            {
                foreach (var type in module.Models)
                { #>
            builder.RegisterType<<#= type.Name #>Business>().As<I<#= type.Name #>Business>();
				<# }
			} #>

            // register data access
            builder.RegisterType<BetonCRMContext>().AsSelf();
            builder.RegisterType<EFUnitOfWork>().As<IUnitOfWork>();

            // Set the dependency resolver to be Autofac.
            var container = builder.Build();
            config.DependencyResolver = new AutofacWebApiDependencyResolver(container);
        }
    }
}
